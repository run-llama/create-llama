import os
from typing import Dict, List, Optional

from app.engine.index import get_index
from app.engine.tools import ToolFactory
from app.workflows.multi import AgentCallingAgent
from app.workflows.single import FunctionCallingAgent
from llama_index.core.base.llms.types import ChatMessage
from llama_index.core.indices.vector_store import VectorStoreIndex
from llama_index.core.tools import FunctionTool, QueryEngineTool
from llama_index.core.workflow import (
    Workflow,
)


def create_workflow(
    chat_history: Optional[List[ChatMessage]] = None, **kwargs
) -> Workflow:
    index: VectorStoreIndex = get_index()
    if index is None:
        query_engine_tool = None
    else:
        top_k = int(os.getenv("TOP_K", 10))
        query_engine = index.as_query_engine(similarity_top_k=top_k)
        query_engine_tool = QueryEngineTool.from_defaults(query_engine=query_engine)

    configured_tools: Dict[str, FunctionTool] = ToolFactory.from_env(map_result=True)  # type: ignore
    extractor_tool = configured_tools.get("extract_questions")
    filling_tool = configured_tools.get("fill_form")

    if extractor_tool is None or filling_tool is None:
        raise ValueError("Extractor or filling tool is not found!")

    extractor = FunctionCallingAgent(
        name="CSVExtractor",
        tools=[extractor_tool],
        system_prompt="""
        Your task is to extract missing cells (row, col, question) in a CSV file and generate questions to fill them.
        If user requested for other file formats, response: "I can only process CSV files."
        """,
        description="Extract missing cells in a CSV file and generate questions to fill them. Only process for CSV files.",
        chat_history=chat_history,
    )

    researcher = FunctionCallingAgent(
        name="Researcher",
        tools=[query_engine_tool],
        system_prompt="""
        Your task is to answer the questions generated by the Extractor.
        If there are multiple questions, please request multiple tool calls at once, don't need to wait for the response or call them sequentially.
        Example:
        Questions: ["What is the capital of France?", "What is the population of Japan?"]
        Tool calls: [query_engine_tool.call("What is the capital of France?"), query_engine_tool.call("What is the population of Japan?")]
        """,
        description="Answer the questions generated by the Extractor. Can give me multiple answers at once.",
        chat_history=chat_history,
    )

    filler = FunctionCallingAgent(
        name="Filler",
        tools=[filling_tool],
        description="Fill the missing cells in a CSV file with the answers.",
        chat_history=chat_history,
    )

    workflow = AgentCallingAgent(
        name="FormFilling",
        agents=[extractor, researcher, filler],
        chat_history=chat_history,
        description="""
        Your task is to help user with csv file.
        You can give the Researcher multiple questions at once (list of questions).
        """,
        write_events=False,
    )

    return workflow
